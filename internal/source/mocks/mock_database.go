// Code generated by MockGen. DO NOT EDIT.
// Source: posgresql.go
//
// Generated by this command:
//
//	mockgen -source=posgresql.go -destination=mocks/mock_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "fucking-fat/internal/models"
	slog "log/slog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceDbs is a mock of ServiceDbs interface.
type MockServiceDbs struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDbsMockRecorder
}

// MockServiceDbsMockRecorder is the mock recorder for MockServiceDbs.
type MockServiceDbsMockRecorder struct {
	mock *MockServiceDbs
}

// NewMockServiceDbs creates a new mock instance.
func NewMockServiceDbs(ctrl *gomock.Controller) *MockServiceDbs {
	mock := &MockServiceDbs{ctrl: ctrl}
	mock.recorder = &MockServiceDbsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDbs) EXPECT() *MockServiceDbsMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockServiceDbs) Register(user *models.User, log *slog.Logger) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user, log)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServiceDbsMockRecorder) Register(user, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceDbs)(nil).Register), user, log)
}

// UserInfo mocks base method.
func (m *MockServiceDbs) UserInfo(data models.User, log *slog.Logger) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", data, log)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockServiceDbsMockRecorder) UserInfo(data, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockServiceDbs)(nil).UserInfo), data, log)
}

// MockAuthDbs is a mock of AuthDbs interface.
type MockAuthDbs struct {
	ctrl     *gomock.Controller
	recorder *MockAuthDbsMockRecorder
}

// MockAuthDbsMockRecorder is the mock recorder for MockAuthDbs.
type MockAuthDbsMockRecorder struct {
	mock *MockAuthDbs
}

// NewMockAuthDbs creates a new mock instance.
func NewMockAuthDbs(ctrl *gomock.Controller) *MockAuthDbs {
	mock := &MockAuthDbs{ctrl: ctrl}
	mock.recorder = &MockAuthDbsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthDbs) EXPECT() *MockAuthDbsMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthDbs) Login(username, password string, log *slog.Logger) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, log)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthDbsMockRecorder) Login(username, password, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthDbs)(nil).Login), username, password, log)
}

// Logout mocks base method.
func (m *MockAuthDbs) Logout(username string, log *slog.Logger) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", username, log)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthDbsMockRecorder) Logout(username, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthDbs)(nil).Logout), username, log)
}
